<?php
/**
 * Admin Reports Generate - Report Generation Handler
 * Timetable Management System
 * 
 * Handles AJAX requests for report generation and export functionality
 * Integrates with existing Export_Helper class and Report class
 */

// Start session and security checks
session_start();

// Include required files
require_once '../../config/config.php';
require_once '../../config/database.php';
require_once '../../classes/User.php';
require_once '../../classes/Report.php';
require_once '../../classes/Export_Helper.php';

// Ensure no stray output corrupts JSON
ob_start();
ini_set('display_errors', '0'); // prevent warnings/notices from being sent to client

// Set JSON response header only for POST (GET may serve files)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    header('Content-Type: application/json');
}

// Track whether we already responded with JSON (for POST requests)
$__JSON_RESP_SENT = false;

// Helper to emit JSON safely
function safe_json_response(array $payload, int $statusCode = 200): void {
    global $__JSON_RESP_SENT;
    if (!headers_sent()) {
        http_response_code($statusCode);
        header('Content-Type: application/json');
    }
    // Clear any buffered output to avoid mixing with JSON
    while (ob_get_level() > 0) {
        ob_end_clean();
    }
    echo json_encode($payload);
    $__JSON_RESP_SENT = true;
    exit;
}

// Convert PHP warnings/notices into exceptions so we can respond in JSON
set_error_handler(function ($severity, $message, $file, $line) {
    if (!(error_reporting() & $severity)) {
        return false; // respect @ suppression
    }
    throw new ErrorException($message, 0, $severity, $file, $line);
});

// Ensure a JSON error is returned on fatal errors for POST requests
register_shutdown_function(function () {
    global $__JSON_RESP_SENT;
    $error = error_get_last();
    if ($error && in_array($error['type'], [E_ERROR, E_PARSE, E_CORE_ERROR, E_COMPILE_ERROR, E_USER_ERROR])) {
        if (php_sapi_name() !== 'cli' && $_SERVER['REQUEST_METHOD'] === 'POST') {
            // Try to send a safe JSON error; ignore if headers already sent
            try {
                safe_json_response([
                    'success' => false,
                    'error' => 'A server error occurred while generating the report.',
                    'details' => defined('APP_ENV') && APP_ENV === 'development' ? $error['message'] : null
                ], 500);
            } catch (Throwable $t) {
                // Last resort: do nothing
            }
        }
        return;
    }
    // If no JSON was sent for a POST request, emit a generic error to avoid empty body
    if (php_sapi_name() !== 'cli' && $_SERVER['REQUEST_METHOD'] === 'POST' && ! $__JSON_RESP_SENT) {
        try {
            safe_json_response([
                'success' => false,
                'error' => 'No response generated by the server.'
            ], 500);
        } catch (Throwable $t) {
            // swallow
        }
    }
});

// Ensure user is logged in and has admin role
try {
    User::requireLogin();
    User::requireRole('admin');
} catch (Throwable $e) {
    safe_json_response([
        'success' => false,
        'error' => 'Access denied: ' . $e->getMessage()
    ], 403);
}

// Get current user info
$currentUserId = User::getCurrentUserId();
$db = Database::getInstance();
$reportManager = new Report();
$exportService = new ExportService();

// Handle different actions
$action = $_POST['action'] ?? '';

try {
    switch ($action) {
        case 'quick_report':
            handleQuickReport();
            break;
            
        case 'custom_report':
            handleCustomReport();
            break;
            
        case 'cleanup_files':
            handleCleanupFiles();
            break;
            
        default:
            throw new Exception('Invalid action specified');
    }
    
} catch (Throwable $e) {
    error_log("Reports Generate Error: " . $e->getMessage());
    safe_json_response([
        'success' => false,
        'error' => $e->getMessage()
    ], 400);
}

/**
 * Handle quick report generation
 */
function handleQuickReport() {
    global $reportManager, $exportService, $currentUserId;
    
    $type = $_POST['type'] ?? '';
    $format = $_POST['format'] ?? 'excel';
    
    if (empty($type)) {
        throw new Exception('Report type is required');
    }
    
    // Validate format
    if (!in_array($format, ['pdf', 'excel'])) {
        throw new Exception('Invalid export format');
    }
    
    $result = null;
    
    switch ($type) {
        case 'users':
            // Generate users report using existing ExportService method
            $result = $exportService->exportAllUsers($format);
            break;
            
        case 'timetables':
            // Generate current semester timetables
            $filters = [
                'academic_year' => '2025-2026',
                'semester' => 1
            ];
            $timetableData = $reportManager->generateCustomReport([
                'type' => 'timetables',
                'filters' => $filters,
                'title' => 'Current Timetables Report'
            ], $currentUserId);
            
            if ($timetableData['success']) {
                $result = $reportManager->exportReport(
                    $timetableData['data'], 
                    'timetables', 
                    $currentUserId,
                    $format
                );
            } else {
                throw new Exception('Failed to generate timetable data');
            }
            break;
            
        case 'resources':
            // Generate resource utilization using the public API
            $util = $reportManager->getTimetableUtilization([]);

            if (!is_array($util)) {
                throw new Exception('Failed to generate resource utilization data - invalid response from database');
            }
            
            // Check if we have any data at all
            $hasData = !empty($util['classroom_utilization']) || 
                      !empty($util['faculty_workload']) || 
                      !empty($util['subject_statistics']);
            
            if (!$hasData) {
                throw new Exception('No resource utilization data available. Please ensure there are active timetables, classrooms, and faculty in the system.');
            }

            // Map to the structure expected by specialized exporters
            $mapped = [
                'classroom_utilization' => array_map(function($c){
                    return [
                        'room_number' => $c['room_number'] ?? '',
                        'building' => $c['building'] ?? '',
                        'capacity' => $c['capacity'] ?? 0,
                        'type' => $c['type'] ?? '',
                        // rename scheduled_slots -> scheduled_classes
                        'scheduled_classes' => $c['scheduled_slots'] ?? 0,
                        'utilization_percentage' => $c['utilization_percentage'] ?? 0,
                    ];
                }, $util['classroom_utilization'] ?? []),
                'faculty_workload' => array_map(function($f){
                    return [
                        'employee_id' => $f['employee_id'] ?? '',
                        'faculty_name' => $f['faculty_name'] ?? '',
                        'department' => $f['department'] ?? '',
                        // rename teaching_slots -> teaching_load
                        'teaching_load' => $f['teaching_slots'] ?? 0,
                        // rename unique_subjects -> subjects_taught
                        'subjects_taught' => $f['unique_subjects'] ?? 0,
                        // ensure classrooms_used exists (added in query), default 0
                        'classrooms_used' => $f['classrooms_used'] ?? 0,
                    ];
                }, $util['faculty_workload'] ?? []),
                'subject_popularity' => array_map(function($s){
                    return [
                        'subject_code' => $s['subject_code'] ?? '',
                        'subject_name' => $s['subject_name'] ?? '',
                        'department' => $s['department'] ?? '',
                        'enrolled_students' => $s['enrolled_students'] ?? 0,
                        // rename assigned_faculty -> faculty_assigned
                        'faculty_assigned' => $s['assigned_faculty'] ?? 0,
                        'credits' => $s['credits'] ?? '',
                    ];
                }, $util['subject_statistics'] ?? [])
            ];

            // Export via specialized resource utilization exporters
            $result = $reportManager->exportReport(
                $mapped,
                'resource_utilization',
                $currentUserId,
                $format
            );
            break;
            
        case 'activity':
            // Generate activity report (last 30 days)
            $activityData = $reportManager->generateCustomReport([
                'type' => 'activity',
                'filters' => ['days' => 30],
                'title' => 'System Activity Report'
            ], $currentUserId);
            
            if ($activityData['success']) {
                $result = $reportManager->exportReport(
                    $activityData['data'], 
                    'system_activity', 
                    $currentUserId,
                    $format
                );
            } else {
                throw new Exception('Failed to generate activity data');
            }
            break;
            
        case 'analytics':
            // Generate comprehensive analytics using ExportService
            $result = $exportService->exportSystemStats($format);
            break;
            
        default:
            throw new Exception('Unknown report type: ' . $type);
    }
    
    if ($result && $result['success']) {
        safe_json_response([
            'success' => true,
            'message' => 'Report generated successfully',
            'filename' => $result['filename'],
            'download_url' => $result['download_url'] ?? null
        ]);
    } else {
        throw new Exception($result['error'] ?? 'Failed to generate report');
    }
}

/**
 * Handle custom report generation with filters
 */
function handleCustomReport() {
    global $reportManager, $currentUserId;
    
    $type = $_POST['type'] ?? '';
    $format = $_POST['format'] ?? 'excel';
    $title = trim($_POST['title'] ?? '');
    
    if (empty($type) || empty($title)) {
        throw new Exception('Report type and title are required');
    }
    
    // Validate format
    if (!in_array($format, ['pdf', 'excel'])) {
        throw new Exception('Invalid export format');
    }
    
    // Collect filters
    $filters = [];
    
    if (!empty($_POST['date_from'])) {
        $filters['date_from'] = $_POST['date_from'];
    }
    
    if (!empty($_POST['date_to'])) {
        $filters['date_to'] = $_POST['date_to'];
    }
    
    if (!empty($_POST['department'])) {
        $filters['department'] = $_POST['department'];
    }
    
    if (!empty($_POST['role'])) {
        $filters['role'] = $_POST['role'];
    }
    
    if (!empty($_POST['academic_year'])) {
        $filters['academic_year'] = $_POST['academic_year'];
    }
    
    if (!empty($_POST['semester'])) {
        $filters['semester'] = (int)$_POST['semester'];
    }
    
    if (!empty($_POST['status'])) {
        $filters['status'] = $_POST['status'];
    }
    
    // Validate filters
    $validation = $reportManager->validateReportFilters($filters);
    if (!$validation['valid']) {
        throw new Exception('Invalid filters: ' . implode(', ', $validation['errors']));
    }
    
    // Generate custom report
    $reportConfig = [
        'type' => $type,
        'title' => $title,
        'filters' => $filters,
        'format' => $format
    ];
    
    $reportData = $reportManager->generateCustomReport($reportConfig, $currentUserId);
    
    if (!$reportData['success']) {
        throw new Exception($reportData['error'] ?? 'Failed to generate report data');
    }
    
    // Export the report
    $exportResult = $reportManager->exportReport(
        $reportData['data'], 
        $type . '_custom', 
        $currentUserId,
        $format
    );
    
    if ($exportResult && $exportResult['success']) {
        safe_json_response([
            'success' => true,
            'message' => 'Custom report generated successfully',
            'filename' => $exportResult['filename'],
            'download_url' => $exportResult['download_url'] ?? null,
            'metadata' => $reportData['metadata']
        ]);
    } else {
        throw new Exception($exportResult['error'] ?? 'Failed to export report');
    }
}

/**
 * Handle file cleanup
 */
function handleCleanupFiles() {
    global $reportManager;
    
    $daysOld = (int)($_POST['days_old'] ?? 7);
    
    if ($daysOld < 1 || $daysOld > 365) {
        throw new Exception('Days old must be between 1 and 365');
    }
    
    $result = $reportManager->cleanupOldReports($daysOld);
    
    if ($result['success']) {
        safe_json_response([
            'success' => true,
            'message' => "Cleaned up old files successfully. Removed files older than {$daysOld} days."
        ]);
    } else {
        throw new Exception($result['error'] ?? 'Failed to cleanup files');
    }
}

/**
 * Handle download file requests
 */
function handleDownload() {
    $filename = $_GET['file'] ?? '';
    
    if (empty($filename)) {
        http_response_code(400);
        echo json_encode(['error' => 'Filename is required']);
        return;
    }
    
    // Sanitize filename to prevent directory traversal
    $filename = basename($filename);
    $filepath = EXPORTS_PATH . $filename;
    
    if (!file_exists($filepath)) {
        http_response_code(404);
        echo json_encode(['error' => 'File not found']);
        return;
    }
    
    // Determine content type
    $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
    $contentTypes = [
        'pdf' => 'application/pdf',
        'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'csv' => 'text/csv'
    ];
    
    $contentType = $contentTypes[$extension] ?? 'application/octet-stream';
    
    // Set headers for download
    header('Content-Type: ' . $contentType);
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    header('Content-Length: ' . filesize($filepath));
    header('Cache-Control: no-cache, must-revalidate');
    header('Expires: 0');
    
    // Output file
    readfile($filepath);
    exit;
}

// Handle GET requests for file downloads
if ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['download'])) {
    handleDownload();
}
?>